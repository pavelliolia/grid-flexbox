{"version":3,"sources":["Ellipse.tsx","Game.tsx","Sum.tsx","Timer.tsx","Layout.tsx","App.tsx","index.tsx"],"names":["getRatio","size","Ellipse","color","label","content","styles","mx","my","width","display","flexDirection","alignItems","fontSize","fontWeight","undefined","root","px","py","backgroundColor","borderRadius","initial","initPoints","pointsArray","map","point","index","value","isTaken","isActive","Game","useState","points","setPoints","resetPoints","useCallback","score","setScore","addScore","length","old","dropScore","bank","setBank","dropToBank","reset","useEffect","newPoints","handleKeyDown","event","code","document","addEventListener","removeEventListener","justifyContent","slice","reverse","textAlign","ml","onClick","icon","Sum","mr","defaultValue","pr","getMinsSecs","seconds","mins","Math","floor","secs","Timer","isPlaying","setIsPlaying","playPause","key","setKey","duartion","setDuration","addSec","removeSec","renderTime","remainingTime","duration","colors","mb","Layout","height","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","gridArea","justifyItems","placeItems","App","resetCSS","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26fb7ceb.chunk.js","sourcesContent":["import { Box, StyleProps } from '@chakra-ui/react';\n\nexport type EllipseProps = {\n  size?: 'small' | 'medium' | 'large';\n  color?: string;\n  label?: string;\n  content: string | number;\n  styles?: {\n    root?: StyleProps;\n    content?: StyleProps;\n    label?: StyleProps;\n  };\n};\n\nconst getRatio = (size: EllipseProps['size']) => {\n  switch (size) {\n    case 'small':\n      return 1.75;\n    case 'medium':\n      return 2.1;\n    case 'large':\n      return 2.8;\n    default:\n      return 1;\n  }\n};\n\nexport const Ellipse = ({\n  size = 'medium',\n  color = '#c2c2c2',\n  label,\n  content,\n  styles,\n}: EllipseProps) => {\n  return (\n    <Box\n      mx={3}\n      my={1}\n      width=\"max-content\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      fontSize={`${getRatio(size)}em`}\n      fontWeight={size === 'large' ? 'bold' : undefined}\n      {...styles?.root}\n    >\n      <Box\n        px={7}\n        py={2}\n        backgroundColor={color}\n        borderRadius={30}\n        {...styles?.content}\n      >\n        {content}\n      </Box>\n      {label && (\n        <Box mx=\"auto\" {...styles?.label}>\n          {label}\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import { RepeatClockIcon } from '@chakra-ui/icons';\nimport { Box, IconButton } from '@chakra-ui/react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Ellipse } from './Ellipse';\n\nconst initial = [1, 2, 4, 7, 10, 15, 20, 25, 30, 50];\n\nconst initPoints = (pointsArray: number[]) =>\n  pointsArray.map((point, index) => {\n    if (index === 0) {\n      return {\n        value: point,\n        isTaken: false,\n        isActive: true,\n      };\n    }\n    return {\n      value: point,\n      isTaken: false,\n      isActive: false,\n    };\n  });\n\nexport const Game = () => {\n  const [points, setPoints] = useState(initPoints(initial));\n  const resetPoints = useCallback(() => setPoints(initPoints(initial)), []);\n\n  const [score, setScore] = useState(0);\n  const addScore = useCallback(() => {\n    if (score < points.length) {\n      setScore((old) => old + 1);\n    }\n  }, [score]);\n  const dropScore = useCallback(() => {\n    setScore(0);\n    resetPoints();\n  }, []);\n\n  const [bank, setBank] = useState(0);\n  const dropToBank = useCallback(() => {\n    if (score === 0) {\n      return;\n    }\n    setBank((old) => old + points[score - 1].value);\n    dropScore();\n    resetPoints();\n  }, [score, points]);\n\n  const reset = useCallback(() => {\n    dropScore();\n    setBank(0);\n  }, []);\n\n  useEffect(\n    () =>\n      setPoints((points) => {\n        const newPoints = points.map((point, index) => {\n          if (index + 1 <= score) {\n            return { ...point, isTaken: true, isActive: false };\n          }\n          return { ...point, isTaken: false };\n        });\n        if (score < points.length) {\n          newPoints[score].isActive = true;\n        }\n        return newPoints;\n      }),\n    [score],\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.code) {\n        case 'ArrowUp':\n          addScore();\n          break;\n        case 'ArrowDown':\n          dropScore();\n          break;\n        case 'Space':\n          dropToBank();\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [dropToBank, addScore]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Box>\n        {points\n          .slice()\n          .reverse()\n          .map(({ value, isActive, isTaken }, index) => {\n            if (index === 0)\n              return (\n                <Ellipse\n                  key={value}\n                  size=\"large\"\n                  content={value}\n                  color={isTaken ? '#c43404' : '#035082'}\n                  styles={{\n                    root: { color: '#fff' },\n                    content: {\n                      width: 150,\n                      textAlign: 'center',\n                      ml: isActive ? 5 : undefined,\n                    },\n                  }}\n                />\n              );\n            return (\n              <Ellipse\n                key={value}\n                content={value}\n                color={isTaken ? '#c43404' : '#035082'}\n                styles={{\n                  root: { color: '#fff' },\n                  content: {\n                    width: 150,\n                    textAlign: 'center',\n                    ml: isActive ? 5 : undefined,\n                  },\n                }}\n              />\n            );\n          })}\n      </Box>\n      <Box display=\"flex\" alignItems=\"flex-start\">\n        <Ellipse size=\"large\" content={bank} label=\"БАНК\" />\n        <IconButton\n          onClick={reset}\n          icon={<RepeatClockIcon />}\n          aria-label=\"Reset Time\"\n        />\n      </Box>\n    </Box>\n  );\n};\n","import {\n  Editable,\n  EditableInput,\n  EditablePreview,\n  Box,\n  Text,\n} from '@chakra-ui/react';\n\nexport const Sum = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Text fontSize=\"3xl\" mr={2}>\n        ВСЕГО:\n      </Text>\n      <Editable\n        textAlign=\"center\"\n        defaultValue=\"0\"\n        fontSize=\"5xl\"\n        fontWeight=\"bold\"\n        pr={2}\n      >\n        <EditablePreview />\n        <EditableInput />\n      </Editable>\n    </Box>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { Box, Text, IconButton } from '@chakra-ui/react';\nimport {\n  RepeatClockIcon,\n  TriangleDownIcon,\n  TriangleUpIcon,\n} from '@chakra-ui/icons';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n\nconst getMinsSecs = (seconds: number) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n\n  return `${mins < 10 ? `0${mins}` : mins}:${secs < 10 ? `0${secs}` : secs}`;\n};\n\nexport const Timer = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playPause = useCallback(() => {\n    isPlaying ? setIsPlaying(false) : setIsPlaying(true);\n  }, [isPlaying]);\n\n  const [key, setKey] = useState(1);\n  const reset = useCallback(() => {\n    setKey((old) => old + 1);\n    setIsPlaying(false);\n  }, []);\n\n  const [duartion, setDuration] = useState(2 * 60);\n  const addSec = useCallback(() => {\n    setDuration((old) => old + 1);\n    reset();\n  }, []);\n  const removeSec = useCallback(() => {\n    setDuration((old) => old - 1);\n    reset();\n  }, []);\n\n  const renderTime = useCallback(\n    ({ remainingTime }: { remainingTime: number }) => (\n      <Text fontSize=\"6em\">{getMinsSecs(remainingTime)}</Text>\n    ),\n    [],\n  );\n\n  return (\n    <Box display=\"flex\">\n      <Box onClick={playPause}>\n        <CountdownCircleTimer\n          key={key}\n          isPlaying={isPlaying}\n          duration={duartion}\n          colors={[\n            ['#004777', 0.33],\n            ['#F7B801', 0.33],\n            ['#A30000', 0.33],\n          ]}\n          size={350}\n        >\n          {renderTime}\n        </CountdownCircleTimer>\n      </Box>\n      <Box ml={2} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n        <IconButton\n          onClick={addSec}\n          icon={<TriangleUpIcon />}\n          aria-label=\"Increase Time\"\n          mb={1}\n        />\n        <IconButton\n          onClick={removeSec}\n          icon={<TriangleDownIcon />}\n          aria-label=\"Decrease Time\"\n          mb={1}\n        />\n        <IconButton\n          onClick={reset}\n          icon={<RepeatClockIcon />}\n          aria-label=\"Reset Time\"\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from '@chakra-ui/react';\nimport { Game } from './Game';\nimport { Sum } from './Sum';\nimport { Timer } from './Timer';\n\nconst gridTemplateAreas = `\n\"stairs . sum\"\n\"stairs time time\"\n`;\n\nexport const Layout = () => {\n  return (\n    <Box\n      width=\"100vw\"\n      height=\"100vh\"\n      display=\"grid\"\n      gridTemplateAreas={gridTemplateAreas}\n      gridTemplateColumns=\"max-content 1fr max-content\"\n      gridTemplateRows=\"max-content 1fr max-content\"\n    >\n      <Box gridArea=\"stairs\" display=\"grid\" justifyItems=\"center\">\n        <Game />\n      </Box>\n      <Box gridArea=\"sum\" display=\"grid\" justifyItems=\"end\">\n        <Sum />\n      </Box>\n      <Box gridArea=\"time\" display=\"grid\" placeItems=\"center\">\n        <Timer />\n      </Box>\n    </Box>\n  );\n};\n","import { ChakraProvider } from '@chakra-ui/react';\nimport { Layout } from './Layout';\n\nexport const App = () => (\n  <ChakraProvider resetCSS>\n    <Layout />\n  </ChakraProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}